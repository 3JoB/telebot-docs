import{_ as s,c as n,o as a,Q as o}from"./chunks/framework.31184730.js";const u=JSON.parse('{"title":"日志","description":"","frontmatter":{"title":"日志","layout":"doc"},"headers":[],"relativePath":"zh/guide/interface/logger.md","filePath":"zh/guide/interface/logger.md","lastUpdated":null}'),l={name:"zh/guide/interface/logger.md"},p=o(`<h1 id="日志" tabindex="-1">日志 <a class="header-anchor" href="#日志" aria-label="Permalink to &quot;日志&quot;">​</a></h1><p>The idea of Logger comes from <a href="https://github.com/tucnak/telebot/issues/619" target="_blank" rel="noreferrer">https://github.com/tucnak/telebot/issues/619</a>.</p><p>The Logger interface allows you to customize log wrappers for TEP, which uses Zerolog-based wrappers by default.</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Logger</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">Println</span><span style="color:#E1E4E8;">(a </span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">any)</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">Panicf</span><span style="color:#E1E4E8;">(format </span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;">, a </span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">any)</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">Printf</span><span style="color:#E1E4E8;">(format </span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;">, a </span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">any)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// OnError was originally in the Settings structure and was separated into Logger in v2.</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">OnError</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">error</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">Context)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Logger</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">Println</span><span style="color:#24292E;">(a </span><span style="color:#D73A49;">...</span><span style="color:#24292E;">any)</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">Panicf</span><span style="color:#24292E;">(format </span><span style="color:#D73A49;">string</span><span style="color:#24292E;">, a </span><span style="color:#D73A49;">...</span><span style="color:#24292E;">any)</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">Printf</span><span style="color:#24292E;">(format </span><span style="color:#D73A49;">string</span><span style="color:#24292E;">, a </span><span style="color:#D73A49;">...</span><span style="color:#24292E;">any)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// OnError was originally in the Settings structure and was separated into Logger in v2.</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">OnError</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">error</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">Context)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>It is very concise, because TeleBot usually does not need so many methods, so it only defines some of the most important methods, and then there are none. It can also be called through the Bot pointer.</p><p>Like:</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(){</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">......</span><span style="color:#E1E4E8;">.</span></span>
<span class="line"><span style="color:#E1E4E8;">    b.</span><span style="color:#79B8FF;">Logger</span><span style="color:#E1E4E8;">().</span><span style="color:#79B8FF;">Println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;my telebot&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">......</span><span style="color:#24292E;">.</span></span>
<span class="line"><span style="color:#24292E;">    b.</span><span style="color:#005CC5;">Logger</span><span style="color:#24292E;">().</span><span style="color:#005CC5;">Println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;my telebot&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>Or:</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">K</span><span style="color:#E1E4E8;">(c </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">telebot.Context) </span><span style="color:#F97583;">error</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    c.b.</span><span style="color:#79B8FF;">Logger</span><span style="color:#E1E4E8;">().</span><span style="color:#79B8FF;">Println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;i like cookie&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">K</span><span style="color:#24292E;">(c </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">telebot.Context) </span><span style="color:#D73A49;">error</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    c.b.</span><span style="color:#005CC5;">Logger</span><span style="color:#24292E;">().</span><span style="color:#005CC5;">Println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;i like cookie&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div>`,9),e=[p];function t(r,c,E,y,i,g){return a(),n("div",null,e)}const h=s(l,[["render",t]]);export{u as __pageData,h as default};
