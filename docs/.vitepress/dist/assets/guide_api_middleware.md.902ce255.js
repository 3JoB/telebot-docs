import{_ as s,c as n,o as a,Q as l}from"./chunks/framework.31184730.js";const F=JSON.parse('{"title":"Middleware","description":"","frontmatter":{"title":"Middleware","layout":"doc"},"headers":[],"relativePath":"guide/api/middleware.md","filePath":"guide/api/middleware.md","lastUpdated":null}'),p={name:"guide/api/middleware.md"},o=l(`<h1 id="middleware" tabindex="-1">Middleware <a class="header-anchor" href="#middleware" aria-label="Permalink to &quot;Middleware&quot;">â€‹</a></h1><p>Telebot has a simple and recognizable way to set up middleware - a chain of functions that you can access, calling <code>Context</code> before the handler is executed.</p><p>Import the <code>middleware</code> package to get some basic out-of-the-box middleware implementations:</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;">github.com/3JoB/telebot/v2/middleware</span><span style="color:#9ECBFF;">&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;</span><span style="color:#6F42C1;">github.com/3JoB/telebot/v2/middleware</span><span style="color:#032F62;">&quot;</span></span></code></pre></div><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// Global-scoped middleware:</span></span>
<span class="line"><span style="color:#E1E4E8;">b.</span><span style="color:#79B8FF;">Use</span><span style="color:#E1E4E8;">(middleware.</span><span style="color:#79B8FF;">Logger</span><span style="color:#E1E4E8;">())</span></span>
<span class="line"><span style="color:#E1E4E8;">b.</span><span style="color:#79B8FF;">Use</span><span style="color:#E1E4E8;">(middleware.</span><span style="color:#79B8FF;">AutoRespond</span><span style="color:#E1E4E8;">())</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// Group-scoped middleware:</span></span>
<span class="line"><span style="color:#E1E4E8;">adminOnly </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> b.</span><span style="color:#79B8FF;">Group</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">adminOnly.</span><span style="color:#79B8FF;">Use</span><span style="color:#E1E4E8;">(middleware.</span><span style="color:#79B8FF;">Whitelist</span><span style="color:#E1E4E8;">(adminIDs</span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">))</span></span>
<span class="line"><span style="color:#E1E4E8;">adminOnly.</span><span style="color:#79B8FF;">Handle</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/ban&quot;</span><span style="color:#E1E4E8;">, onBan)</span></span>
<span class="line"><span style="color:#E1E4E8;">adminOnly.</span><span style="color:#79B8FF;">Handle</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/kick&quot;</span><span style="color:#E1E4E8;">, onKick)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// Handler-scoped middleware:</span></span>
<span class="line"><span style="color:#E1E4E8;">b.</span><span style="color:#79B8FF;">Handle</span><span style="color:#E1E4E8;">(tele.OnText, onText, middleware.</span><span style="color:#79B8FF;">IgnoreVia</span><span style="color:#E1E4E8;">())</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// Global-scoped middleware:</span></span>
<span class="line"><span style="color:#24292E;">b.</span><span style="color:#005CC5;">Use</span><span style="color:#24292E;">(middleware.</span><span style="color:#005CC5;">Logger</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#24292E;">b.</span><span style="color:#005CC5;">Use</span><span style="color:#24292E;">(middleware.</span><span style="color:#005CC5;">AutoRespond</span><span style="color:#24292E;">())</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// Group-scoped middleware:</span></span>
<span class="line"><span style="color:#24292E;">adminOnly </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> b.</span><span style="color:#005CC5;">Group</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">adminOnly.</span><span style="color:#005CC5;">Use</span><span style="color:#24292E;">(middleware.</span><span style="color:#005CC5;">Whitelist</span><span style="color:#24292E;">(adminIDs</span><span style="color:#D73A49;">...</span><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#24292E;">adminOnly.</span><span style="color:#005CC5;">Handle</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/ban&quot;</span><span style="color:#24292E;">, onBan)</span></span>
<span class="line"><span style="color:#24292E;">adminOnly.</span><span style="color:#005CC5;">Handle</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/kick&quot;</span><span style="color:#24292E;">, onKick)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// Handler-scoped middleware:</span></span>
<span class="line"><span style="color:#24292E;">b.</span><span style="color:#005CC5;">Handle</span><span style="color:#24292E;">(tele.OnText, onText, middleware.</span><span style="color:#005CC5;">IgnoreVia</span><span style="color:#24292E;">())</span></span></code></pre></div><p>Custom middleware example:</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// AutoResponder automatically responds to every callback update.</span></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AutoResponder</span><span style="color:#E1E4E8;">(c </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">tele.Context) </span><span style="color:#F97583;">error</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> c.</span><span style="color:#79B8FF;">Callback</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">defer</span><span style="color:#E1E4E8;"> c.</span><span style="color:#79B8FF;">Respond</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> c.</span><span style="color:#79B8FF;">Next</span><span style="color:#E1E4E8;">() </span><span style="color:#6A737D;">// continue execution chain</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// AutoResponder automatically responds to every callback update.</span></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AutoResponder</span><span style="color:#24292E;">(c </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">tele.Context) </span><span style="color:#D73A49;">error</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> c.</span><span style="color:#005CC5;">Callback</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">defer</span><span style="color:#24292E;"> c.</span><span style="color:#005CC5;">Respond</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> c.</span><span style="color:#005CC5;">Next</span><span style="color:#24292E;">() </span><span style="color:#6A737D;">// continue execution chain</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><code>c.Next()</code> can enable middleware to reduce nested returns:</p><p>Telebot:</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// AutoRespond returns a middleware that automatically responds</span></span>
<span class="line"><span style="color:#6A737D;">// to every callback.</span></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AutoRespond</span><span style="color:#E1E4E8;">() tele.MiddlewareFunc {</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">func</span><span style="color:#E1E4E8;">(next tele.HandlerFunc) tele.HandlerFunc {</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">func</span><span style="color:#E1E4E8;">(c tele.Context) </span><span style="color:#F97583;">error</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> c.</span><span style="color:#79B8FF;">Callback</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">				</span><span style="color:#F97583;">defer</span><span style="color:#E1E4E8;"> c.</span><span style="color:#79B8FF;">Respond</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">			}</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">next</span><span style="color:#E1E4E8;">(c)</span></span>
<span class="line"><span style="color:#E1E4E8;">		}</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// AutoRespond returns a middleware that automatically responds</span></span>
<span class="line"><span style="color:#6A737D;">// to every callback.</span></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AutoRespond</span><span style="color:#24292E;">() tele.MiddlewareFunc {</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">func</span><span style="color:#24292E;">(next tele.HandlerFunc) tele.HandlerFunc {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">func</span><span style="color:#24292E;">(c tele.Context) </span><span style="color:#D73A49;">error</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> c.</span><span style="color:#005CC5;">Callback</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">				</span><span style="color:#D73A49;">defer</span><span style="color:#24292E;"> c.</span><span style="color:#005CC5;">Respond</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">			}</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">next</span><span style="color:#24292E;">(c)</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>TelebotE:</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// AutoRespond returns a middleware that automatically responds</span></span>
<span class="line"><span style="color:#6A737D;">// to every callback.</span></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AutoRespond</span><span style="color:#E1E4E8;">(c </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">telebot.Context) </span><span style="color:#F97583;">error</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> c.</span><span style="color:#79B8FF;">Callback</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#F97583;">defer</span><span style="color:#E1E4E8;"> c.</span><span style="color:#79B8FF;">Respond</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">		}</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> c.</span><span style="color:#79B8FF;">Next</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// AutoRespond returns a middleware that automatically responds</span></span>
<span class="line"><span style="color:#6A737D;">// to every callback.</span></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AutoRespond</span><span style="color:#24292E;">(c </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">telebot.Context) </span><span style="color:#D73A49;">error</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> c.</span><span style="color:#005CC5;">Callback</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#D73A49;">defer</span><span style="color:#24292E;"> c.</span><span style="color:#005CC5;">Respond</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> c.</span><span style="color:#005CC5;">Next</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>How about it, there are not so many nested returns, doesnâ€™t it look very concise?</p><p>As a reminder, for each group, it is best to import the handler after all the middleware is imported, otherwise the subsequent middleware will be lost. I will solve this problem in the future.</p>`,14),e=[o];function t(c,r,y,E,i,d){return a(),n("div",null,e)}const m=s(p,[["render",t]]);export{F as __pageData,m as default};
