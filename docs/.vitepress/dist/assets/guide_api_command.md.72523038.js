import{_ as s,c as a,o as n,Q as l}from"./chunks/framework.31184730.js";const m=JSON.parse('{"title":"Commands","description":"","frontmatter":{"title":"Commands","layout":"doc"},"headers":[],"relativePath":"guide/api/command.md","filePath":"guide/api/command.md","lastUpdated":null}'),o={name:"guide/api/command.md"},p=l(`<h1 id="commands" tabindex="-1">Commands <a class="header-anchor" href="#commands" aria-label="Permalink to &quot;Commands&quot;">​</a></h1><p>When handling commands, Telebot supports both direct (<code>/command</code>) and group-like syntax (<code>/command@botname</code>) and will never deliver messages addressed to some other bot, even if <a href="https://core.telegram.org/bots#privacy-mode" target="_blank" rel="noreferrer">privacy mode</a> is off.</p><p>For simplified deep-linking, Telebot also extracts payload:</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// Command: /start &lt;PAYLOAD&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">b.</span><span style="color:#79B8FF;">Handle</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/start&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">func</span><span style="color:#E1E4E8;">(c </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">tele.Context) </span><span style="color:#F97583;">error</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">	fmt.</span><span style="color:#79B8FF;">Println</span><span style="color:#E1E4E8;">(c.</span><span style="color:#79B8FF;">Message</span><span style="color:#E1E4E8;">().Payload) </span><span style="color:#6A737D;">// &lt;PAYLOAD&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// Command: /start &lt;PAYLOAD&gt;</span></span>
<span class="line"><span style="color:#24292E;">b.</span><span style="color:#005CC5;">Handle</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/start&quot;</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">func</span><span style="color:#24292E;">(c </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">tele.Context) </span><span style="color:#D73A49;">error</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">	fmt.</span><span style="color:#005CC5;">Println</span><span style="color:#24292E;">(c.</span><span style="color:#005CC5;">Message</span><span style="color:#24292E;">().Payload) </span><span style="color:#6A737D;">// &lt;PAYLOAD&gt;</span></span>
<span class="line"><span style="color:#24292E;">})</span></span></code></pre></div><p>For multiple arguments use:</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// Command: /tags &lt;tag1&gt; &lt;tag2&gt; &lt;...&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">b.</span><span style="color:#79B8FF;">Handle</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/tags&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">func</span><span style="color:#E1E4E8;">(c </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">tele.Context) </span><span style="color:#F97583;">error</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">	tags </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> c.</span><span style="color:#79B8FF;">Args</span><span style="color:#E1E4E8;">() </span><span style="color:#6A737D;">// list of arguments splitted by a space</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> _, tag </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">range</span><span style="color:#E1E4E8;"> tags {</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#6A737D;">// iterate through passed arguments</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// Command: /tags &lt;tag1&gt; &lt;tag2&gt; &lt;...&gt;</span></span>
<span class="line"><span style="color:#24292E;">b.</span><span style="color:#005CC5;">Handle</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/tags&quot;</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">func</span><span style="color:#24292E;">(c </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">tele.Context) </span><span style="color:#D73A49;">error</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">	tags </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> c.</span><span style="color:#005CC5;">Args</span><span style="color:#24292E;">() </span><span style="color:#6A737D;">// list of arguments splitted by a space</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> _, tag </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">range</span><span style="color:#24292E;"> tags {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6A737D;">// iterate through passed arguments</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">})</span></span></code></pre></div><p>TelebotE&#39;s new command processing directly processes strings instead of using regular expressions, which can greatly improve performance, and the payload can also return newline content.</p><h2 id="benchmark" tabindex="-1">Benchmark <a class="header-anchor" href="#benchmark" aria-label="Permalink to &quot;Benchmark&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">RE2: wasm, no cgo</span></span>
<span class="line"><span style="color:#e1e4e8;">REG: github.com/grafana/regexp</span></span>
<span class="line"><span style="color:#e1e4e8;">Strings: process()</span></span>
<span class="line"><span style="color:#e1e4e8;">cpu: 12th Gen Intel(R) Core(TM) i7-12700H</span></span>
<span class="line"><span style="color:#e1e4e8;">----</span></span>
<span class="line"><span style="color:#e1e4e8;">Benchmark_RE2-20            377274	            3039 ns/op	         592 B/op	      13 allocs/op</span></span>
<span class="line"><span style="color:#e1e4e8;">Benchmark_REG-20           1746291             685.1 ns/o              436 B/op	      3 allocs/op</span></span>
<span class="line"><span style="color:#e1e4e8;">Benchmark_Strings-20      28667738	       43.29 ns/op	         32 B/op	          1 allocs/op</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">RE2: wasm, no cgo</span></span>
<span class="line"><span style="color:#24292e;">REG: github.com/grafana/regexp</span></span>
<span class="line"><span style="color:#24292e;">Strings: process()</span></span>
<span class="line"><span style="color:#24292e;">cpu: 12th Gen Intel(R) Core(TM) i7-12700H</span></span>
<span class="line"><span style="color:#24292e;">----</span></span>
<span class="line"><span style="color:#24292e;">Benchmark_RE2-20            377274	            3039 ns/op	         592 B/op	      13 allocs/op</span></span>
<span class="line"><span style="color:#24292e;">Benchmark_REG-20           1746291             685.1 ns/o              436 B/op	      3 allocs/op</span></span>
<span class="line"><span style="color:#24292e;">Benchmark_Strings-20      28667738	       43.29 ns/op	         32 B/op	          1 allocs/op</span></span></code></pre></div>`,9),e=[p];function t(c,r,i,y,E,d){return n(),a("div",null,e)}const h=s(o,[["render",t]]);export{m as __pageData,h as default};
